//
//  DogsListViperViewController.swift
//  WizelineArchitectuesSMES
//
//  Created Adrian Piedra on 09/03/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

final class DogsListViperViewController: UIViewController, DogsListViperViewProtocol {
    
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var resultsCounterLabel: UILabel!
    @IBOutlet weak var tableView: UITableView!
    
    //MARK: - DogsListViperViewProtocol Properties
	var presenter: DogsListViperPresenterProtocol?
    
    //MARK: - Initializers
    init() {
        super.init(nibName: "DogsListViperViewController", bundle: nil)
    }
    
    //MARK: - LifeCycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        presenter?.getDogs()
    }
    
    //MARK: - DogsListViperViewProtocol
    func didLoadDogs(status: DogListAPIStatus) {
        switch status {
        case .loading:
            self.activityIndicator.isHidden = false
            self.activityIndicator.startAnimating()
            
        case .finished(let dogs):
            self.resultsCounterLabel.text = "Results: \(dogs.count)"
            self.activityIndicator.stopAnimating()
            self.activityIndicator.isHidden = true
            
            self.tableView.reloadData()
            
        default:
            break
        }
    }
    
    //MARK: - Methods
    private func setupUI() {
        title = "VIPER"
        tableView.register(.init(nibName: "DogMVVMTableViewCell", bundle: nil),
                           forCellReuseIdentifier: DogMVVMTableViewCell.cellIdentifier)
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

//MARK: - UITableViewDelegate, UITableViewDataSource
extension DogsListViperViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter?.source.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: DogMVVMTableViewCell.cellIdentifier,
                                                       for: indexPath) as? DogMVVMTableViewCell,
           let dog = presenter?.source[indexPath.row] {
            //Combining architectures MVVM reusing module of the cell
            cell.bind(viewModel: DogMVVMCellViewModel(dog: dog))
            return cell
        }
        
        return UITableViewCell()
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let dogSelected = presenter?.source[indexPath.row] else { return }
        presenter?.dogTapped(dogSelected)
    }
}
